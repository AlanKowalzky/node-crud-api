import request from 'supertest';
import server from '../index';
import { users } from '../database';

describe('Users API - Basic Scenario', () => {
    let createdUserId: string;



    beforeAll(() => {
        users.length = 0;
    });



    afterAll(async () => {


        if (server.listening) {
            await new Promise<void>(resolve => server.close(() => resolve()));
        }
    });

    test('1. GET /api/users - should return an empty array initially', async () => {
        const response = await request(server).get('/api/users');
        expect(response.status).toBe(200);
        expect(response.body).toEqual([]);
    });

    test('2. POST /api/users - should create a new user', async () => {
        const newUser = {
            username: 'Test User One',
            age: 30,
            hobbies: ['testing', 'coding']
        };
        const response = await request(server).post('/api/users').send(newUser);

        expect(response.status).toBe(201);
        expect(response.body.id).toBeDefined();
        expect(response.body.username).toBe(newUser.username);
        expect(response.body.age).toBe(newUser.age);
        expect(response.body.hobbies).toEqual(newUser.hobbies);

        createdUserId = response.body.id;
    });

    test('3. GET /api/users/{userId} - should retrieve the created user', async () => {

        expect(createdUserId).toBeDefined();
        const response = await request(server).get(`/api/users/${createdUserId}`);
        expect(response.status).toBe(200);
        expect(response.body.id).toBe(createdUserId);
        expect(response.body.username).toBe('Test User One');
    });
});